***************************
Version 2.4.4, 14 May 2021
***************************
Updates to both the GUI and API

1. Tillage updates: 

- Simplified how tillage events are implemented for tillage classes (Intensive, Reduced, Mulch, Ridge, Strip, Notill) and aligned these tillage classes with how the national inventory implements tillage. Multiple tillage events were removed and replaced by the most intense tillage event in the class. The CULT W event was removed to make the tillage classes consistent with the National Inventory work. The following DayCent tillage events are implemented for each class: 
- 	Intensive Tillage: CULT K (moldboard plow) 
-	Reduced Tillage: CULT H (multiple passes of an offset/tandem disk, tandem/offset disk combined by chisel plow, or similar) 
- 	Mulch Tillage: CULT F (single pass disk or similar) 
- 	Ridge Tillage: CULT D (single pass field cultivator or similar) 
- 	Strip Tillage: CULT C (strip tillage + planter) 
- 	No Tillage:  CULT A (no till planter) 

- This change affects projects modeled with Strip tillage and No Tillage. Strip tillage now implements a “CULT C” event, which has a somewhat heavier impact than the No Tillage “CULT A” event. Previously, both tillage classes were modeled with a “CULT W” event, which has been removed from the system. 

- Aerial and Broadcast seeding were previously modeled as CULT W events, however tillage impacts have been removed from the tool so there is no net soil disturbance impact from these events. The ability to include them in the tool has been left in place and has not been deprecated. 

- A code defect affecting historical tillage during the 1980-2000 period has been corrected. Projects with no tillage or reduced tillage selected for this time period would have modeled with no tillage difference compared with intensive tillage.  

2. Organic Matter Additions (OMAD): A code defect that produced an unrecognized OMAD event with trailing zeroes for the DayCent model has been repaired. 

3. Default NH3 fractions corrected: We corrected the default NH3 fraction in fertilizers to be the following: 

- Ammonium Nitrate corrected to 0.5 
- Calcium Ammonium Nitrate corrected to 0.5 
- Ammonium Nitrate Phosphate (23-23-00) corrected to 0.5 
- Ammonium Nitrate Phosphate (27-14-00) corrected to 0.5 
- Urea Ammonium Nitrate (30-00-00) corrected to 0.75 
- Diammonium Phosphate (18-46-00) corrected to 1.0 
- Urea Ammonium Phosphate (27-27-00) corrected to 1.0 
- Urea Ammonium Phosphate (34-17-00) corrected to 1.0 

4. Animal Agriculture: Code defects involving allocation of manure to shared aerobic lagoons were repaired.

***************************
Version 2.3.3, 18 June 2020
***************************
1. Corrected a defect in how COMET-Farm export files are read by the API. The COMET-Farm system has the capacity to export cropland projects from the project page, and send those files directly to the API. The export process was exporting the tag contents for the <Grain> tag as "True" or "False" rather than the expected "Yes" or "No". This was corrected on the API side to accept "True" or "False" in this tag.

2. The COMET-Farm team corrected a defect in how indirect soil nitrous oxide emissions are simulated in the COMET-Farm API. The defect affected the nitrogen inputs when organic matter additions such as manure, compost, and organic fertilizers such as feather meal were added to the nitrogen pools driving the indirect soil nitrous oxide from volatilization and leaching. This defect has been repaired in the release made on June 18, 2020 at 4pm.

This defect affected projects with organic matter additions, leading to an undercounting of indirect soil nitrous oxide emissions. Indirect soil nitrous oxide emissions are typically 3-15% of the total soil nitrous oxide emissions for a field. The N sources that drive the model include the following:
-	synthetic fertilizer
-	organic matter additions such as compost, manure, and organic fertilizers
-	crop residues
-	cycling of soil organic matter within the field

Again, this defect only affected projects with organic matter additions. The COMET team estimates that the effect of this defect was that indirect soil nitrous oxide was under-counted by approximately one-quarter to one-third. The overall effect on total soil nitrous oxide (direct + indirect sources) would be that it was under-counted by approximately 1-5% for fields where organic matter additions were made, depending upon the amount of organic matter added.

Projects that did not adjust nitrogen inputs from organic matter sources across scenarios would see no impact on the difference in soil nitrous oxide across fields. Said differently, the magnitude of indirect soil nitrous oxide emissions estimates would be the same for all scenarios with the same nutrient management regime, and hence there would be no different between scenarios for this subsource category.

The COMET Team is introducing additional testing procedures to detect this type of problem in future releases to the tool.

In addition to repairing this defect, we have removed the tags for model uncertainty in the output files as they are not currently being used. Our next major release in the API will include calculations for uncertainty.

We have added three additional record tags to the API results, as follows:
-	<SoilN2O_Direct>: Direct soil N2O emissions
-	<SoilN2O_Indirect_Volatilization>: Indirect soil N2O emissions from volatilization
-	<SoilN2O_Indirect_Leaching>: Indirect soil N2O emissions from leaching and runoff

***************************
Version 2.3.2, 5 June 2020
***************************
1. Added the capacity for users to request results to be sent via webhooks or to a URL where an http server listens for a response. The requirement to accept model run results at an email address is still available to users. Details for how to utilize this functionality are in the API I/O documentation.
2. Added error trapping and reporting methods to capture errors in API inputs, as well as to report those errors back to users. Added improved error reporting for other error types, such as DayCent errors or model processing errors. The error trapping is described in the API I/O documentation.
